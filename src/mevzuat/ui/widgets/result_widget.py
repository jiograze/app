"""
Sonu√ß g√∂r√ºnt√ºleme widget'ƒ± - arama sonu√ßlarƒ±nƒ± g√∂sterir
"""

import logging
from datetime import datetime
from typing import List, Optional

from PyQt5.QtCore import QSize, Qt, QTimer, pyqtSignal
from PyQt5.QtGui import QBrush, QColor, QFont, QIcon, QPainter, QPixmap
from PyQt5.QtWidgets import (
    QAbstractItemView,
    QApplication,
    QCheckBox,
    QFileDialog,
    QFrame,
    QGroupBox,
    QHBoxLayout,
    QHeaderView,
    QLabel,
    QListWidget,
    QListWidgetItem,
    QMenu,
    QMessageBox,
    QPushButton,
    QSplitter,
    QTableWidget,
    QTableWidgetItem,
    QTabWidget,
    QTextEdit,
    QVBoxLayout,
    QWidget,
)

from mevzuat.core.search_engine import SearchResult


class ResultListWidget(QListWidget):
    """Sonu√ß listesi widget'ƒ±"""
    
    result_selected = pyqtSignal(SearchResult)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.logger = logging.getLogger(self.__class__.__name__)
        self.results: List[SearchResult] = []
        
        self.setSelectionMode(QListWidget.SingleSelection)
        self.setAlternatingRowColors(True)
        self.setWordWrap(True)
        self.setContextMenuPolicy(Qt.CustomContextMenu)
        self.customContextMenuRequested.connect(self.show_context_menu)
        
        self.itemSelectionChanged.connect(self.on_selection_changed)
    
    def display_results(self, results: List[SearchResult]):
        """Sonu√ßlarƒ± listele"""
        self.clear()
        self.results = results
        
        for result in results:
            item = ResultItem(result)
            self.addItem(item)
    
    def on_selection_changed(self):
        """Se√ßim deƒüi≈ütiƒüinde"""
        selected_items = self.selectedItems()
        if selected_items:
            result = selected_items[0].result
            self.result_selected.emit(result)
    
    def show_context_menu(self, position):
        """Context menu g√∂ster"""
        item = self.itemAt(position)
        if not item:
            return
            
        result = item.result
        menu = QMenu()
        
        copy_action = menu.addAction("Panoya Kopyala")
        favorite_action = menu.addAction("Favorilere Ekle")
        note_action = menu.addAction("Not Ekle")
        
        action = menu.exec_(self.viewport().mapToGlobal(position))
        
        if action == copy_action:
            self.copy_to_clipboard(result)
        elif action == favorite_action:
            self.add_to_favorites(result)
        elif action == note_action:
            self.add_note(result)
    
    def copy_to_clipboard(self, result: SearchResult):
        """Sonucu panoya kopyala"""
        clipboard = QApplication.clipboard()
        text = f"{result.title}\n\n{result.content}"
        clipboard.setText(text)
    
    def add_to_favorites(self, result: SearchResult):
        """Favorilere ekle"""
        # TODO: Favori ekleme i≈ülevselliƒüi eklenecek
        QMessageBox.information(self, "Bilgi", f"{result.title} favorilere eklendi!")
    
    def add_note(self, result: SearchResult):
        """Not ekle"""
        # TODO: Not ekleme i≈ülevselliƒüi eklenecek
        QMessageBox.information(self, "Bilgi", f"{result.title} i√ßin not ekleme")


class ResultItem(QListWidgetItem):
    """Sonu√ß listesi item'ƒ±"""

    def __init__(self, result: SearchResult):
        super().__init__()
        self.result = result

        # G√∂r√ºn√ºm√º ayarla
        self.update_display()

    def update_display(self):
        """G√∂r√ºn√ºm√º g√ºncelle"""
        # Ana ba≈ülƒ±k
        title = (
            self.result.title
            or f"{self.result.document_type} - Madde {self.result.article_number}"
        )

        # Alt ba≈ülƒ±k bilgileri
        subtitle_parts = []
        if self.result.document_title:
            subtitle_parts.append(self.result.document_title)
        if self.result.law_number:
            subtitle_parts.append(f"Kanun No: {self.result.law_number}")

        subtitle = " | ".join(subtitle_parts)

        # Durum g√∂stergeleri
        status_indicators = []
        if self.result.is_repealed:
            status_indicators.append("üö´ M√úLGA")
        elif self.result.is_amended:
            status_indicators.append("üìù DEƒûƒ∞≈ûƒ∞K")

        # Skor g√∂sterimi
        score_text = f"Skor: {self.result.score:.3f}"
        match_type_icon = "üéØ" if self.result.match_type == "exact" else "üîç"

        # HTML formatƒ±nda metin olu≈ütur
        display_text = f"""
        <div style="padding: 8px;">
            <div style="font-weight: bold; font-size: 14px; margin-bottom: 4px;">
                {match_type_icon} {title}
            </div>
            <div style="color: #666; font-size: 12px; margin-bottom: 4px;">
                {subtitle}
            </div>
            <div style="color: #333; font-size: 13px; margin-bottom: 6px;">
                {self.result.content[:200]}...
            </div>
            <div style="font-size: 11px; color: #888;">
                <span>{score_text}</span>
                {' | '.join(status_indicators) if status_indicators else ''}
            </div>
        </div>
        """

        self.setText(display_text)
        self.setData(Qt.UserRole, self.result)


class ResultTableWidget(QTableWidget):
    """Sonu√ß tablosu widget'ƒ±"""

    result_selected = pyqtSignal(SearchResult)

    def __init__(self):
        super().__init__()
        self.logger = logging.getLogger(self.__class__.__name__)
        self.results: List[SearchResult] = []

        self.init_ui()

    def init_ui(self):
        """UI'yi olu≈ütur"""
        # S√ºtun ba≈ülƒ±klarƒ±
        headers = ["T√ºr", "Ba≈ülƒ±k", "Belge", "Madde", "Skor", "Durum"]
        self.setColumnCount(len(headers))
        self.setHorizontalHeaderLabels(headers)

        # Ayarlar
        self.setAlternatingRowColors(True)
        self.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.setSelectionMode(QAbstractItemView.SingleSelection)
        self.setSortingEnabled(True)

        # S√ºtun geni≈ülikleri
        header = self.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)  # T√ºr
        header.setSectionResizeMode(1, QHeaderView.Stretch)  # Ba≈ülƒ±k
        header.setSectionResizeMode(2, QHeaderView.Stretch)  # Belge
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)  # Madde
        header.setSectionResizeMode(4, QHeaderView.ResizeToContents)  # Skor
        header.setSectionResizeMode(5, QHeaderView.ResizeToContents)  # Durum

        # Context menu
        self.setContextMenuPolicy(Qt.CustomContextMenu)
        self.customContextMenuRequested.connect(self.show_context_menu)

        # Se√ßim deƒüi≈üimi
        self.itemSelectionChanged.connect(self.on_selection_changed)

    def display_results(self, results: List[SearchResult]):
        """Sonu√ßlarƒ± g√∂ster"""
        try:
            self.clear()
            self.results = results

            if not results:
                return

            # Satƒ±r sayƒ±sƒ±nƒ± ayarla
            self.setRowCount(len(results))

            for row, result in enumerate(results):
                # T√ºr
                type_item = QTableWidgetItem(result.document_type or "Bilinmeyen")
                self.setItem(row, 0, type_item)

                # Ba≈ülƒ±k
                title = result.title or f"Madde {result.article_number}" or "Ba≈ülƒ±ksƒ±z"
                title_item = QTableWidgetItem(title)
                self.setItem(row, 1, title_item)

                # Belge
                doc_title = result.document_title or "Bilinmeyen"
                doc_item = QTableWidgetItem(doc_title)
                self.setItem(row, 2, doc_item)

                # Madde
                article_item = QTableWidgetItem(str(result.article_number or ""))
                self.setItem(row, 3, article_item)

                # Skor
                score_item = QTableWidgetItem(f"{result.score:.3f}")
                self.setItem(row, 4, score_item)

                # Durum
                status = "Aktif"
                if result.is_repealed:
                    status = "M√ºlga"
                elif result.is_amended:
                    status = "Deƒüi≈üik"
                status_item = QTableWidgetItem(status)
                self.setItem(row, 5, status_item)

                # Renk kodlamasƒ±
                if result.is_repealed:
                    for col in range(6):
                        item = self.item(row, col)
                        if item:
                            item.setForeground(QBrush(QColor(150, 150, 150)))
                elif result.is_amended:
                    for col in range(6):
                        item = self.item(row, col)
                        if item:
                            item.setForeground(QBrush(QColor(200, 100, 0)))

                # User data
                for col in range(6):
                    item = self.item(row, col)
                    if item:
                        item.setData(Qt.UserRole, result)

            self.logger.info(f"{len(results)} sonu√ß tabloda g√∂sterildi")

        except Exception as e:
            self.logger.error(f"Tablo sonu√ß g√∂sterme hatasƒ±: {e}")

    def show_context_menu(self, position):
        """Context menu g√∂ster"""
        try:
            current_row = self.currentRow()
            if current_row < 0:
                return

            result = self.results[current_row]
            if not result:
                return

            menu = QMenu(self)

            # Detay g√∂ster
            show_action = menu.addAction("Detaylarƒ± G√∂ster")
            show_action.triggered.connect(lambda: self.result_selected.emit(result))

            # Panoya kopyala
            copy_action = menu.addAction("Panoya Kopyala")
            copy_action.triggered.connect(lambda: self.copy_to_clipboard(result))

            # Favorilere ekle
            fav_action = menu.addAction("Favorilere Ekle")
            fav_action.triggered.connect(lambda: self.add_to_favorites(result))

            # Not ekle
            note_action = menu.addAction("Not Ekle")
            note_action.triggered.connect(lambda: self.add_note(result))

            menu.exec_(self.mapToGlobal(position))

        except Exception as e:
            self.logger.error(f"Context menu hatasƒ±: {e}")

    def copy_to_clipboard(self, result: SearchResult):
        """Sonucu panoya kopyala"""
        try:
            content = f"""
{result.title or f'Madde {result.article_number}'}
Belge: {result.document_title}
T√ºr: {result.document_type}
Skor: {result.score:.3f}
ƒ∞√ßerik: {result.content}
"""
            QApplication.clipboard().setText(content.strip())

        except Exception as e:
            self.logger.error(f"Panoya kopyalama hatasƒ±: {e}")

    def add_to_favorites(self, result: SearchResult):
        """Favorilere ekle"""
        try:
            # TODO: Implement favorites functionality
            pass

        except Exception as e:
            self.logger.error(f"Favori ekleme hatasƒ±: {e}")

    def add_note(self, result: SearchResult):
        """Not ekle"""
        try:
            # TODO: Implement note functionality
            pass

        except Exception as e:
            self.logger.error(f"Not ekleme hatasƒ±: {e}")

    def on_selection_changed(self):
        """Se√ßim deƒüi≈ütiƒüinde"""
        try:
            current_row = self.currentRow()
            if current_row >= 0 and current_row < len(self.results):
                result = self.results[current_row]
                if result:
                    self.result_selected.emit(result)

        except Exception as e:
            self.logger.error(f"Se√ßim deƒüi≈üimi hatasƒ±: {e}")

        # Tablo ayarlarƒ±
        self.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.setSelectionMode(QAbstractItemView.SingleSelection)
        self.setAlternatingRowColors(True)
        self.setSortingEnabled(True)

        # S√ºtun geni≈ülikleri
        header = self.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)  # T√ºr
        header.setSectionResizeMode(1, QHeaderView.Stretch)  # Ba≈ülƒ±k
        header.setSectionResizeMode(2, QHeaderView.Interactive)  # Belge
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)  # Madde
        header.setSectionResizeMode(4, QHeaderView.ResizeToContents)  # Skor
        header.setSectionResizeMode(5, QHeaderView.ResizeToContents)  # Durum

        # Context menu
        self.setContextMenuPolicy(Qt.CustomContextMenu)
        self.customContextMenuRequested.connect(self.show_context_menu)

        # Se√ßim deƒüi≈üimi
        self.itemSelectionChanged.connect(self.on_selection_changed)

    def display_results(self, results: List[SearchResult]):
        """Sonu√ßlarƒ± g√∂ster"""
        self.results = results

        # Tabloyu temizle
        self.setRowCount(0)

        if not results:
            return

        # Sonu√ßlarƒ± ekle
        self.setRowCount(len(results))

        for row, result in enumerate(results):
            try:
                # T√ºr
                type_item = QTableWidgetItem(result.document_type)
                type_item.setData(Qt.UserRole, result)
                self.setItem(row, 0, type_item)

                # Ba≈ülƒ±k
                title = result.title or f"Madde {result.article_number}"
                title_item = QTableWidgetItem(title)
                self.setItem(row, 1, title_item)

                # Belge adƒ±
                doc_title = result.document_title or ""
                if result.law_number:
                    doc_title += f" ({result.law_number})"
                doc_item = QTableWidgetItem(doc_title)
                self.setItem(row, 2, doc_item)

                # Madde numarasƒ±
                article_item = QTableWidgetItem(
                    str(result.article_number) if result.article_number else ""
                )
                self.setItem(row, 3, article_item)

                # Skor
                score_item = QTableWidgetItem(f"{result.score:.3f}")
                self.setItem(row, 4, score_item)

                # Durum
                status = ""
                if result.is_repealed:
                    status = "M√ºlga"
                elif result.is_amended:
                    status = "Deƒüi≈üik"
                else:
                    status = "Aktif"

                status_item = QTableWidgetItem(status)

                # Renk kodlamasƒ±
                if result.is_repealed:
                    status_item.setBackground(
                        QBrush(QColor(255, 200, 200))
                    )  # Kƒ±rmƒ±zƒ±msƒ±
                elif result.is_amended:
                    status_item.setBackground(QBrush(QColor(255, 255, 200)))  # Sarƒ±msƒ±
                else:
                    status_item.setBackground(
                        QBrush(QColor(200, 255, 200))
                    )  # Ye≈üilimsi

                self.setItem(row, 5, status_item)

                # Y√ºksek skor i√ßin vurgulama
                if result.score > 0.8:
                    for col in range(self.columnCount()):
                        item = self.item(row, col)
                        if item:
                            font = item.font()
                            font.setBold(True)
                            item.setFont(font)

            except Exception as e:
                self.logger.error(f"Sonu√ß g√∂sterme hatasƒ± (satƒ±r {row}): {e}")
                continue

        # ƒ∞lk sonucu se√ß
        if results:
            self.selectRow(0)

    def on_selection_changed(self):
        """Se√ßim deƒüi≈ütiƒüinde"""
    def show_context_menu(self, position):
        """Context menu g√∂ster"""
        try:
            item = self.itemAt(position)
            if not item:
                return

            result = item.data(Qt.UserRole)
            if not result:
                return

            menu = QMenu()

            # Kopyala
            copy_action = menu.addAction("Panoya Kopyala")
            copy_action.triggered.connect(lambda: self.copy_to_clipboard(result))

            # Favorilere ekle
            fav_action = menu.addAction("Favorilere Ekle")
            fav_action.triggered.connect(lambda: self.add_to_favorites(result))

            # Not ekle
            note_action = menu.addAction("Not Ekle")
            note_action.triggered.connect(lambda: self.add_note(result))

            # Detaylarƒ± g√∂ster
            detail_action = menu.addAction("Detaylarƒ± G√∂ster")
            detail_action.triggered.connect(lambda: self.show_details(result))

            menu.exec_(self.viewport().mapToGlobal(position))

        except Exception as e:
            self.logger.error(f"Context menu hatasƒ±: {e}")

    def copy_to_clipboard(self, result: SearchResult):
        """Sonucu panoya kopyala"""
        try:
            content = f"""
{result.title or f'Madde {result.article_number}'}
Belge: {result.document_title}
T√ºr: {result.document_type}
Skor: {result.score:.3f}
ƒ∞√ßerik: {result.content}
"""
            QApplication.clipboard().setText(content.strip())

        except Exception as e:
            self.logger.error(f"Panoya kopyalama hatasƒ±: {e}")

    def add_to_favorites(self, result: SearchResult):
        """Favorilere ekle"""
        try:
            # TODO: Implement favorites functionality
            pass

        except Exception as e:
            self.logger.error(f"Favori ekleme hatasƒ±: {e}")

    def add_note(self, result: SearchResult):
        """Not ekle"""
        try:
            # TODO: Implement note functionality
            pass

        except Exception as e:
            self.logger.error(f"Not ekleme hatasƒ±: {e}")

    def show_details(self, result: SearchResult):
        """Detaylarƒ± g√∂ster"""
        try:
            # TODO: Implement details view
            pass

        except Exception as e:
            self.logger.error(f"Detay g√∂sterme hatasƒ±: {e}")

    def on_selection_changed(self):
        """Se√ßim deƒüi≈ütiƒüinde"""
        try:
            selected_items = self.selectedItems()
            if not selected_items:
                return

            # Sadece ilk se√ßili satƒ±rdaki ilk item'ƒ± al
            first_item = selected_items[0]
            result = first_item.data(Qt.UserRole)
            if result:
                self.result_selected.emit(result)

        except Exception as e:
            self.logger.error(f"Se√ßim deƒüi≈üikliƒüi hatasƒ±: {e}")


class ResultWidget(QWidget):
    """Ana sonu√ß widget'ƒ±"""

    result_selected = pyqtSignal(SearchResult)
    add_note_requested = pyqtSignal(SearchResult)

    def __init__(self):
        super().__init__()
        self.logger = logging.getLogger(self.__class__.__name__)
        self.current_results: List[SearchResult] = []

        self.init_ui()

    def init_ui(self):
        """UI'yi olu≈ütur"""
        layout = QVBoxLayout(self)

        # √úst panel - g√∂r√ºn√ºm se√ßenekleri
        top_panel = QWidget()
        top_layout = QHBoxLayout(top_panel)
        top_layout.setContentsMargins(0, 0, 0, 0)

        # G√∂r√ºn√ºm t√ºr√º se√ßimi
        view_label = QLabel("G√∂r√ºn√ºm:")
        top_layout.addWidget(view_label)

        self.table_view_btn = QPushButton("üìä Tablo")
        self.table_view_btn.setCheckable(True)
        self.table_view_btn.setChecked(True)
        self.table_view_btn.clicked.connect(lambda: self.set_view_mode("table"))
        top_layout.addWidget(self.table_view_btn)

        self.list_view_btn = QPushButton("üìã Liste")
        self.list_view_btn.setCheckable(True)
        self.list_view_btn.clicked.connect(lambda: self.set_view_mode("list"))
        top_layout.addWidget(self.list_view_btn)

        top_layout.addStretch()

        # Filtre se√ßenekleri
        self.show_repealed_cb = QCheckBox("M√ºlga olanlarƒ± g√∂ster")
        self.show_repealed_cb.setChecked(True)
        self.show_repealed_cb.toggled.connect(self.filter_results)
        top_layout.addWidget(self.show_repealed_cb)

        self.show_amended_cb = QCheckBox("Deƒüi≈üiklik olanlarƒ± g√∂ster")
        self.show_amended_cb.setChecked(True)
        self.show_amended_cb.toggled.connect(self.filter_results)
        top_layout.addWidget(self.show_amended_cb)

        # Export ve Print butonlarƒ±
        export_btn = QPushButton("üìÑ Dƒ±≈üa Aktar")
        export_btn.clicked.connect(self.export_results)
        top_layout.addWidget(export_btn)

        print_btn = QPushButton("üñ®Ô∏è Yazdƒ±r")
        print_btn.clicked.connect(self.print_results)
        top_layout.addWidget(print_btn)

        layout.addWidget(top_panel)

        # Ana g√∂r√ºn√ºm alanƒ±
        self.table_widget = ResultTableWidget()
        self.list_widget = ResultListWidget()

        # Ba≈ülangƒ±√ßta tablo g√∂r√ºn√ºm√ºn√º g√∂ster
        self.table_widget.setVisible(True)
        self.list_widget.setVisible(False)

        layout.addWidget(self.table_widget)
        layout.addWidget(self.list_widget)

        # Alt panel - istatistikler
        bottom_panel = QWidget()
        bottom_layout = QHBoxLayout(bottom_panel)
        bottom_layout.setContentsMargins(0, 0, 0, 0)

        self.stats_label = QLabel("Sonu√ß bulunamadƒ±")
        self.stats_label.setStyleSheet("color: #666; font-size: 11px; padding: 5px;")
        bottom_layout.addWidget(self.stats_label)

        bottom_layout.addStretch()

        # Sonu√ß sayƒ±sƒ±
        self.result_count_label = QLabel("0 sonu√ß")
        self.result_count_label.setStyleSheet(
            "color: #666; font-size: 11px; padding: 5px;"
        )
        bottom_layout.addWidget(self.result_count_label)

        layout.addWidget(bottom_panel)

        # Signal baƒülantƒ±larƒ±
        self.table_widget.result_selected.connect(self.on_result_selected)
        self.list_widget.result_selected.connect(self.on_result_selected)

    def on_result_selected(self, result: SearchResult):
        """Sonu√ß se√ßildiƒüinde"""
        try:
            self.result_selected.emit(result)
            self.logger.info(f"Sonu√ß se√ßildi: {result.title or result.article_number}")

        except Exception as e:
            self.logger.error(f"Sonu√ß se√ßim hatasƒ±: {e}")

    def display_results(self, results: List[SearchResult]):
        """Sonu√ßlarƒ± g√∂ster"""
        self.current_results = results

        # Filtrelenmi≈ü sonu√ßlarƒ± al
        filtered_results = self.get_filtered_results()

        # Her iki g√∂r√ºn√ºm√º de g√ºncelle
        self.table_widget.display_results(filtered_results)
        self.list_widget.display_results(filtered_results)

        # ƒ∞statistikleri g√ºncelle
        self.update_stats(filtered_results)

        self.logger.info(f"{len(filtered_results)} sonu√ß g√∂r√ºnt√ºleniyor")

    def get_filtered_results(self) -> List[SearchResult]:
        """Filtrelenmi≈ü sonu√ßlarƒ± al"""
        if not self.current_results:
            return []

        filtered_results = []

        for result in self.current_results:
            # M√ºlga kontrol√º
            if result.is_repealed and not self.show_repealed_cb.isChecked():
                continue

            # Deƒüi≈üiklik kontrol√º
            if result.is_amended and not self.show_amended_cb.isChecked():
                continue

            filtered_results.append(result)

        return filtered_results

    def update_stats(self, results: List[SearchResult]):
        """ƒ∞statistikleri g√ºncelle"""
        if not results:
            self.stats_label.setText("Sonu√ß bulunamadƒ±")
            return

        total = len(results)

        # T√ºr daƒüƒ±lƒ±mƒ±
        type_counts = {}
        active_count = 0
        repealed_count = 0
        amended_count = 0

        for result in results:
            # T√ºr sayƒ±mƒ±
            doc_type = result.document_type
            type_counts[doc_type] = type_counts.get(doc_type, 0) + 1

            # Durum sayƒ±mƒ±
            if result.is_repealed:
                repealed_count += 1
            elif result.is_amended:
                amended_count += 1
            else:
                active_count += 1

        # ƒ∞statistik metnini olu≈ütur
        stats_parts = [f"Toplam: {total}"]

        if active_count:
            stats_parts.append(f"Aktif: {active_count}")
        if amended_count:
            stats_parts.append(f"Deƒüi≈üik: {amended_count}")
        if repealed_count:
            stats_parts.append(f"M√ºlga: {repealed_count}")

        # En yaygƒ±n t√ºr√º ekle
        if type_counts:
            most_common_type = max(type_counts, key=type_counts.get)
            stats_parts.append(
                f"En yaygƒ±n: {most_common_type} ({type_counts[most_common_type]})"
            )

        stats_text = " | ".join(stats_parts)
        self.stats_label.setText(stats_text)

    def set_view_mode(self, mode: str):
        """G√∂r√ºn√ºm modunu ayarla"""
        if mode == "table":
            self.table_widget.setVisible(True)
            self.list_widget.setVisible(False)
            self.table_view_btn.setChecked(True)
            self.list_view_btn.setChecked(False)
        elif mode == "list":
            self.table_widget.setVisible(False)
            self.list_widget.setVisible(True)
            self.table_view_btn.setChecked(False)
            self.list_view_btn.setChecked(True)

    def filter_results(self):
        """Sonu√ßlarƒ± filtrele"""
        filtered_results = self.get_filtered_results()

        # G√∂r√ºn√ºmleri g√ºncelle
        self.table_widget.display_results(filtered_results)
        self.list_widget.display_results(filtered_results)

        # ƒ∞statistikleri g√ºncelle
        self.update_stats(filtered_results)

    def export_results(self):
        """Sonu√ßlarƒ± dƒ±≈üa aktar"""
        if not self.current_results:
            return

        from PyQt5.QtWidgets import QFileDialog, QMessageBox

        filename, _ = QFileDialog.getSaveFileName(
            self,
            "Sonu√ßlarƒ± Kaydet",
            f"arama_sonuclari_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            "Text Files (*.txt);;CSV Files (*.csv);;All Files (*)",
        )

        if filename:
            try:
                self.save_results_to_file(filename)
                QMessageBox.information(
                    self, "Ba≈üarƒ±lƒ±", f"Sonu√ßlar {filename} dosyasƒ±na kaydedildi"
                )
            except Exception as e:
                QMessageBox.critical(self, "Hata", f"Dosya kaydetme hatasƒ±:\n{e}")

    def save_results_to_file(self, filename: str):
        """Sonu√ßlarƒ± dosyaya kaydet"""
        try:
            filtered_results = self.get_filtered_results()

            with open(filename, "w", encoding="utf-8") as f:
                f.write(
                    f"Arama Sonu√ßlarƒ± - {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                )
                f.write("=" * 60 + "\n\n")

                for i, result in enumerate(filtered_results, 1):
                    f.write(f"{i}. {result.title or f'Madde {result.article_number}'}\n")
                    f.write(f"   Belge: {result.document_title}\n")
                    if result.law_number:
                        f.write(f"   Kanun No: {result.law_number}\n")
                    f.write(f"   ƒ∞√ßerik: {result.content}\n\n")

            self.logger.info(f"Sonu√ßlar {filename} dosyasƒ±na kaydedildi")
            return True
            
        except Exception as e:
            self.logger.error(f"Dosyaya kaydetme hatasƒ±: {e}")
            return False

    def clear_results(self):
        """Sonu√ßlarƒ± temizle"""
        self.current_results = []
        self.table_widget.clearContents()
        self.table_widget.setRowCount(0)
        self.list_widget.clear()
        self.stats_label.setText("Sonu√ß bulunamadƒ±")
        self.logger.info("Sonu√ßlar temizlendi")

    def add_to_favorites(self, result: SearchResult):
        """Favorilere ekle"""
        try:
            # TODO: Implement favorites functionality
            QMessageBox.information(
                self, "Bilgi", "Favoriler √∂zelliƒüi hen√ºz geli≈ütirilmedi"
            )

        except Exception as e:
            self.logger.error(f"Favori ekleme hatasƒ±: {e}")

    def add_note(self, result: SearchResult):
        """Not ekle"""
        try:
            # TODO: Implement note functionality
            QMessageBox.information(
                self, "Bilgi", "Not ekleme √∂zelliƒüi hen√ºz geli≈ütirilmedi"
            )

        except Exception as e:
            self.logger.error(f"Not ekleme hatasƒ±: {e}")

    def show_details(self, result: SearchResult):
        """Detaylarƒ± g√∂ster"""
        try:
            self.result_selected.emit(result)

        except Exception as e:
            self.logger.error(f"Detay g√∂sterme hatasƒ±: {e}")

    def copy_to_clipboard(self, result: SearchResult):
        """Sonucu panoya kopyala"""
        try:
            content = f"""
{result.title or f'Madde {result.article_number}'}
Belge: {result.document_title}
T√ºr: {result.document_type}
Skor: {result.score:.3f}
ƒ∞√ßerik: {result.content}
"""
            QApplication.clipboard().setText(content.strip())
            QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "Sonu√ß panoya kopyalandƒ±")

        except Exception as e:
            self.logger.error(f"Panoya kopyalama hatasƒ±: {e}")
            QMessageBox.critical(self, "Hata", f"Panoya kopyalama hatasƒ±:\n{e}")

    def get_selected_result(self) -> Optional[SearchResult]:
        """Se√ßili sonucu al"""
        if self.table_widget.isVisible():
            current_row = self.table_widget.currentRow()
            if current_row >= 0 and current_row < len(self.current_results):
                return self.current_results[current_row]
        elif self.list_widget.isVisible():
            current_item = self.list_widget.currentItem()
            if current_item:
                return current_item.data(Qt.UserRole)

        return None

    def set_max_results(self, max_count: int):
        """Maksimum sonu√ß sayƒ±sƒ±nƒ± ayarla"""
        try:
            self.max_results = max_count
            self.logger.info(f"Maksimum sonu√ß sayƒ±sƒ± {max_count} olarak ayarlandƒ±")
        except Exception as e:
            self.logger.error(f"Maksimum sonu√ß sayƒ±sƒ± ayarlama hatasƒ±: {e}")


        for result in self.current_results:
            # M√ºlga kontrol√º
            if not self.show_repealed_cb.isChecked() and result.is_repealed:
                continue

            # Deƒüi≈üiklik kontrol√º
            if not self.show_amended_cb.isChecked() and result.is_amended:
                continue

            filtered_results.append(result)

        return filtered_results

    def display_results(self, results: List[SearchResult]):
        """Sonu√ßlarƒ± g√∂ster"""
        try:
            self.current_results = results

            # Tablo ve liste g√∂r√ºn√ºmlerini g√ºncelle
            self.table_widget.display_results(results)
            self.list_widget.display_results(results)

            # ƒ∞statistikleri g√ºncelle
            self.update_stats(results)

            self.logger.info(f"{len(results)} sonu√ß g√∂sterildi")

        except Exception as e:
            self.logger.error(f"Sonu√ß g√∂sterme hatasƒ±: {e}")

    def update_stats(self, results: List[SearchResult]):
        """ƒ∞statistikleri g√ºncelle"""
        try:
            if not results:
                self.stats_label.setText("Sonu√ß bulunamadƒ±")
                return

            # Toplam sonu√ß sayƒ±sƒ±
            total_count = len(results)

            # Belge t√ºr√º daƒüƒ±lƒ±mƒ±
            type_counts = {}
            for result in results:
                doc_type = result.document_type or "Bilinmeyen"
                type_counts[doc_type] = type_counts.get(doc_type, 0) + 1

            # Durum daƒüƒ±lƒ±mƒ±
            active_count = len(
                [r for r in results if not r.is_repealed and not r.is_amended]
            )
            amended_count = len([r for r in results if r.is_amended])
            repealed_count = len([r for r in results if r.is_repealed])

            # ƒ∞statistik metni olu≈ütur
            stats_parts = [
                f"Toplam: {total_count}",
                f"Aktif: {active_count}",
                f"Deƒüi≈üik: {amended_count}",
                f"M√ºlga: {repealed_count}",
            ]

            # En yaygƒ±n t√ºr√º ekle
            if type_counts:
                most_common_type = max(type_counts, key=type_counts.get)
                stats_parts.append(
                    f"En yaygƒ±n: {most_common_type} ({type_counts[most_common_type]})"
                )

            stats_text = " | ".join(stats_parts)
            self.stats_label.setText(stats_text)

        except Exception as e:
            self.logger.error(f"ƒ∞statistik g√ºncelleme hatasƒ±: {e}")
            self.stats_label.setText("ƒ∞statistik hatasƒ±")

    def set_view_mode(self, mode: str):
        """G√∂r√ºn√ºm modunu ayarla"""
        try:
            if mode == "table":
                self.table_widget.setVisible(True)
                self.list_widget.setVisible(False)
                self.table_view_btn.setChecked(True)
                self.list_view_btn.setChecked(False)
            elif mode == "list":
                self.table_widget.setVisible(False)
                self.list_widget.setVisible(True)
                self.table_view_btn.setChecked(False)
                self.list_view_btn.setChecked(True)

            self.logger.info(f"G√∂r√ºn√ºm modu {mode} olarak ayarlandƒ±")

        except Exception as e:
            self.logger.error(f"G√∂r√ºn√ºm modu ayarlama hatasƒ±: {e}")

    def filter_results(self):
        """Sonu√ßlarƒ± filtrele"""
        try:
            filtered_results = self.get_filtered_results()

            # G√∂r√ºn√ºmleri g√ºncelle
            self.table_widget.display_results(filtered_results)
            self.list_widget.display_results(filtered_results)

            # ƒ∞statistikleri g√ºncelle
            self.update_stats(filtered_results)

            self.logger.info(f"Sonu√ßlar filtrelendi: {len(filtered_results)} sonu√ß")

        except Exception as e:
            self.logger.error(f"Sonu√ß filtreleme hatasƒ±: {e}")

    def export_results(self):
        """Sonu√ßlarƒ± dƒ±≈üa aktar"""
        if not self.current_results:
            QMessageBox.warning(self, "Uyarƒ±", "Dƒ±≈üa aktarƒ±lacak sonu√ß bulunamadƒ±")
            return

        try:
            filename, _ = QFileDialog.getSaveFileName(
                self,
                "Sonu√ßlarƒ± Kaydet",
                f"arama_sonuclari_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                "Text Files (*.txt);;CSV Files (*.csv);;All Files (*)",
            )

            if filename:
                self.save_results_to_file(filename)
                QMessageBox.information(
                    self, "Ba≈üarƒ±lƒ±", f"Sonu√ßlar {filename} dosyasƒ±na kaydedildi"
                )

        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Dosya kaydetme hatasƒ±:\n{e}")

    def export_to_pdf(self):
        """Sonu√ßlarƒ± PDF'e aktar"""
        if not self.current_results:
            QMessageBox.warning(self, "Uyarƒ±", "Dƒ±≈üa aktarƒ±lacak sonu√ß bulunamadƒ±")
            return

        try:
            from PyQt5.QtWidgets import QFileDialog, QMessageBox
            from reportlab.lib import colors
            from reportlab.lib.pagesizes import A4
            from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
            from reportlab.lib.units import inch
            from reportlab.platypus import (
                Paragraph,
                SimpleDocTemplate,
                Spacer,
                Table,
                TableStyle,
            )

            filename, _ = QFileDialog.getSaveFileName(
                self,
                "PDF'e Aktar",
                f"arama_sonuclari_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                "PDF Files (*.pdf)",
            )

            if filename:
                self._create_pdf_report(filename)
                QMessageBox.information(
                    self, "Ba≈üarƒ±lƒ±", f"PDF raporu {filename} dosyasƒ±na kaydedildi"
                )

        except ImportError:
            QMessageBox.critical(
                self, "Hata", "PDF export i√ßin reportlab k√ºt√ºphanesi gerekli"
            )
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"PDF export hatasƒ±:\n{e}")

    def _create_pdf_report(self, filename: str):
        """PDF raporu olu≈ütur"""
        from reportlab.lib import colors
        from reportlab.lib.pagesizes import A4
        from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
        from reportlab.lib.units import inch
        from reportlab.platypus import (
            Paragraph,
            SimpleDocTemplate,
            Spacer,
            Table,
            TableStyle,
        )

        doc = SimpleDocTemplate(filename, pagesize=A4)
        story = []

        # Ba≈ülƒ±k
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            "CustomTitle",
            parent=styles["Heading1"],
            fontSize=16,
            spaceAfter=30,
            alignment=1,  # Center
        )

        title = Paragraph(f"Arama Sonu√ßlarƒ± Raporu", title_style)
        story.append(title)

        # Tarih
        date_style = ParagraphStyle(
            "Date", parent=styles["Normal"], fontSize=10, alignment=1
        )
        date = Paragraph(
            f"Olu≈üturulma: {datetime.now().strftime('%d.%m.%Y %H:%M')}", date_style
        )
        story.append(date)
        story.append(Spacer(1, 20))

        # ƒ∞statistikler
        filtered_results = self.get_filtered_results()
        stats_text = f"Toplam Sonu√ß: {len(filtered_results)}"
        stats_para = Paragraph(stats_text, styles["Normal"])
        story.append(stats_para)
        story.append(Spacer(1, 20))

        # Tablo ba≈ülƒ±klarƒ±
        headers = ["Sƒ±ra", "Ba≈ülƒ±k", "Belge", "T√ºr", "Skor", "Durum"]
        data = [headers]

        # Tablo verileri
        for i, result in enumerate(filtered_results, 1):
            title = result.title or f"Madde {result.article_number}" or "Ba≈ülƒ±ksƒ±z"
            doc_title = result.document_title or "Bilinmeyen"
            doc_type = result.document_type or "Bilinmeyen"
            score = f"{result.score:.3f}"

            status = "Aktif"
            if result.is_repealed:
                status = "M√ºlga"
            elif result.is_amended:
                status = "Deƒüi≈üik"

            row = [str(i), title[:30], doc_title[:30], doc_type, score, status]
            data.append(row)

        # Tablo olu≈ütur
        table = Table(
            data,
            colWidths=[0.5 * inch, 2 * inch, 2 * inch, 1 * inch, 0.8 * inch, 1 * inch],
        )
        table.setStyle(
            TableStyle(
                [
                    ("BACKGROUND", (0, 0), (-1, 0), colors.grey),
                    ("TEXTCOLOR", (0, 0), (-1, 0), colors.whitesmoke),
                    ("ALIGN", (0, 0), (-1, -1), "CENTER"),
                    ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
                    ("FONTSIZE", (0, 0), (-1, 0), 10),
                    ("BOTTOMPADDING", (0, 0), (-1, 0), 12),
                    ("BACKGROUND", (0, 1), (-1, -1), colors.beige),
                    ("GRID", (0, 0), (-1, -1), 1, colors.black),
                    ("VALIGN", (0, 0), (-1, -1), "MIDDLE"),
                ]
            )
        )

        story.append(table)
        story.append(Spacer(1, 20))

        # PDF olu≈ütur
        doc.build(story)
        self.logger.info(f"PDF raporu olu≈üturuldu: {filename}")

    def print_results(self):
        """Sonu√ßlarƒ± yazdƒ±r"""
        if not self.current_results:
            QMessageBox.warning(self, "Uyarƒ±", "Yazdƒ±rƒ±lacak sonu√ß bulunamadƒ±")
            return

        try:
            from PyQt5.QtPrintSupport import QPrintDialog, QPrinter
            from PyQt5.QtWidgets import QMessageBox

            printer = QPrinter(QPrinter.HighResolution)
            dialog = QPrintDialog(printer, self)

            if dialog.exec_() == QPrintDialog.Accepted:
                self._print_results(printer)

        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Yazdƒ±rma hatasƒ±:\n{e}")

    def _print_results(self, printer):
        """Sonu√ßlarƒ± yazdƒ±r"""
        try:
            from PyQt5.QtCore import Qt
            from PyQt5.QtGui import QFont, QPainter

            painter = QPainter()
            if not painter.begin(printer):
                QMessageBox.critical(self, "Hata", "Yazdƒ±rma ba≈ülatƒ±lamadƒ±")
                return

            # Font ayarlarƒ±
            font = QFont("Arial", 10)
            painter.setFont(font)

            # Sayfa boyutlarƒ±
            page_rect = printer.pageRect()
            x = page_rect.x() + 50
            y = page_rect.y() + 50
            line_height = 20

            # Ba≈ülƒ±k
            title = "Arama Sonu√ßlarƒ± Raporu"
            painter.drawText(x, y, title)
            y += line_height * 2

            # Tarih
            date_text = f"Tarih: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            painter.drawText(x, y, date_text)
            y += line_height * 2

            # Sonu√ßlar
            filtered_results = self.get_filtered_results()
            for i, result in enumerate(filtered_results, 1):
                # Sayfa sonu kontrol√º
                if y > page_rect.height() - 100:
                    printer.newPage()
                    y = page_rect.y() + 50

                # Sonu√ß bilgileri
                title = result.title or f"Madde {result.article_number}" or "Ba≈ülƒ±ksƒ±z"
                painter.drawText(x, y, f"{i}. {title}")
                y += line_height

                doc_title = result.document_title or "Bilinmeyen"
                painter.drawText(x + 20, y, f"Belge: {doc_title}")
                y += line_height

                if result.law_number:
                    painter.drawText(x + 20, y, f"Kanun No: {result.law_number}")
                    y += line_height

                painter.drawText(x + 20, y, f"T√ºr: {result.document_type}")
                y += line_height

                painter.drawText(x + 20, y, f"Skor: {result.score:.3f}")
                y += line_height

                status = "Aktif"
                if result.is_repealed:
                    status = "M√ºlga"
                elif result.is_amended:
                    status = "Deƒüi≈üik"

                painter.drawText(x + 20, y, f"Durum: {status}")
                y += line_height * 2

            painter.end()
            QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "Yazdƒ±rma tamamlandƒ±")

        except Exception as e:
            self.logger.error(f"Yazdƒ±rma hatasƒ±: {e}")
            QMessageBox.critical(self, "Hata", f"Yazdƒ±rma sƒ±rasƒ±nda hata olu≈ütu:\n{e}")
